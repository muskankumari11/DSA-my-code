class Solution {
public:
    vector<vector<int>> diagonalSort(vector<vector<int>>& mat) {
        int m = mat.size();
        int n = mat[0].size();
        for (int i = 0; i < m; i++) {
            sortDiagonal(mat, i, 0, m, n);
        }
        for (int j = 1; j < n; j++) {
            sortDiagonal(mat, 0, j, m, n);
        }
        return mat;
    }
private:
    void sortDiagonal(vector<vector<int>>& mat, int row, int col, int m, int n) {
        vector<int> diagonal;
        while (row < m && col < n) {
            diagonal.push_back(mat[row][col]);
            row++;
            col++;
        }
        sort(diagonal.begin(), diagonal.end());
        row--;
        col--;
        while (row >= 0 && col >= 0) {
            mat[row][col] = diagonal.back();
            diagonal.pop_back();
            row--;
            col--;
        }
    }
};
