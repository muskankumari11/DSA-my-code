/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* lcaDeepestLeaves(TreeNode* root) {
        if (!root)
            return nullptr;
        int leftdepth = getdepth(root->left);
        int rightdepth = getdepth(root->right);
        if (leftdepth == rightdepth)
            return root;
        else if (leftdepth > rightdepth)
            return lcaDeepestLeaves(root->left);
        else
            return lcaDeepestLeaves(root->right);
    }
    int getdepth(TreeNode* node) {
        if (!node)
            return 0;
        int leftdepth = getdepth(node->left);
        int rightdepth = getdepth(node->right);
        return max(leftdepth, rightdepth) + 1;
    }
};
